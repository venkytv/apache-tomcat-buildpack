#!/usr/bin/env ruby
# bin/compile <build-dir> <cache-dir>

require 'digest/md5'
require 'fileutils'
require 'open-uri'
require 'yaml'

BUILDDIR = ARGV.shift
CACHEDIR = ARGV.shift
BUILDPACKDIR = File.dirname(File.dirname(File.expand_path $0))
TMPDIR = ENV['TMPDIR'] || '/tmp'
ORIGDIR = Dir.getwd
CHECKSUMFILE = File.join(BUILDPACKDIR, 'bundles.md5sum')

puts "==========
Build dir: #{BUILDDIR}
Cache dir: #{CACHEDIR}
Buildpack dir: #{BUILDPACKDIR}
Temp dir: #{TMPDIR}
=========="

# Look for config override in cf pushed dir
# and fall back to default in buildpack if not found
configfilename = 'config.yml'
configfile = nil
[ BUILDDIR, BUILDPACKDIR ].each do |dir|
    c = File.join(dir, configfilename)
    if (File.exists?(c))
        configfile = c
        break
    end
end
abort "Config file not found: #{configfilename}" unless configfile

puts "Loading config file: #{configfile}"
config = YAML.load(File.read(configfile))

# Load checksums
puts "Loading checksums"
checksums = {}
File.open(CHECKSUMFILE) do |f|
    f.readlines.each do |line|
        (sum, file) = line.split(/\s+/)
        checksums[file] = sum
    end
end

# Download bundles
puts "Downloading bundles"
config['bundles'].each do |bundlename, bundle|
    filename = bundle['filename']
    location = bundle['location']
    checksum = checksums[filename]

    # Try and load file from cache
    cachedir = File.join(CACHEDIR, checksum)
    cachefile = File.join(cachedir, filename)
    location = cachefile if File.exists?(cachefile)

    puts "Getting bundle #{filename} from #{location}"

    tmpfile = File.join(TMPDIR, bundle['filename'])
    open(tmpfile, 'w') do |outfile|
        open(location) do |infile|
            outfile.write(infile.read)
        end
    end

    # Verify MD5 sum
    if (checksum)
        gotsum = Digest::MD5.hexdigest(File.read(tmpfile))
        abort "MD5 sum mismatch: #{filename}" unless gotsum == checksum
        puts "MD5 check: OK"
    else
        puts "Skipping checksum verification for #{filename}"
    end

    # Cache the downloaded bundle
    if (config['options']['cache_binaries'] and not File.exists?(cachefile))
        puts "Caching file: #{filename}"
        Dir.mkdir cachedir unless File.directory? cachedir
        FileUtils.copy(tmpfile, cachefile)
    end

    # Unbundle into build directory
    puts "Unbundling #{filename}"
    Dir.chdir BUILDDIR
    system('tar', 'xf', tmpfile) \
        or abort "Failed to unbundle #{filename}"
    FileUtils.rm tmpfile
    Dir.chdir ORIGDIR
end

Dir.chdir(BUILDDIR)
[ File.join(BUILDPACKDIR, 'bin', 'boot.rb'), configfile ].each do |infile|
    outfile = File.basename(infile)
    unless (File.identical?(infile, outfile))
        puts "Copying in file #{infile}"
        FileUtils.copy(infile, outfile)
    end
end

# vim: set tabstop=4 shiftwidth=4 expandtab :
